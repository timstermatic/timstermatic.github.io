<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tim Roberts]]></title>
  <link href="http://timstermatic.github.io/atom.xml" rel="self"/>
  <link href="http://timstermatic.github.io/"/>
  <updated>2013-08-21T10:17:42+02:00</updated>
  <id>http://timstermatic.github.io/</id>
  <author>
    <name><![CDATA[Tim Roberts]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A simple MVC framework with node and express]]></title>
    <link href="http://timstermatic.github.io/blog/2013/08/17/a-simple-mvc-framework-with-node-and-express/"/>
    <updated>2013-08-17T10:59:00+02:00</updated>
    <id>http://timstermatic.github.io/blog/2013/08/17/a-simple-mvc-framework-with-node-and-express</id>
    <content type="html"><![CDATA[<p>I love frameworks. As soon as I dropped my programmer&rsquo;s ego and learned to embrace well conceived conventions over configuration my development and deployment times felt the benefit. On the other hand, I like understanding what is going on underneath the hood which there is a danger of losing sight of when using a framework.</p>

<p>And this brings me to why I love node.js and express. For me they provide an boilerplate for a framework: the tools I need to quickly build my own conventions.</p>

<p>For sure, it&rsquo;s pretty easy to build a site with express as it is, but shifting express closer to a <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> setup is simple.</p>

<h3>MVC in layman&rsquo;s terms.</h3>

<p>When I used my first <a href="http://www.cakephp.org">MVC framework</a> I got bit bad. It&rsquo;s not difficult to see why as a pattern it has stood the test of time. And here is all you need to know to start out:</p>

<ul>
<li>M is for model. A place to define data structures and methods to interact with your data store.</li>
<li>V is for view. A place to manage everything the end user sees on his or her screen.</li>
<li>C is for controller. A place to take user requests, bring data from the model and pass it back to the view.</li>
</ul>


<p>And that&rsquo;s enough of that for now. Here&rsquo;s how I arrange my express apps into a basic MVC structure.</p>

<p>First of all I need three folders in the root of my app.</p>

<ul>
<li>models</li>
<li>views</li>
<li>controllers</li>
</ul>


<p>Now on to the app.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">,</span><span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">,</span><span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">,</span><span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>      <span class="p">,</span><span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// database connection</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/mydb&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// some environment variables</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/views&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">favicon</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">logger</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="s1">&#39;your secret here&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// dynamically include routes (Controller)</span>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="s1">&#39;./controllers&#39;</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;.js&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">route</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./controllers/&#39;</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">route</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much of this file is standard if you are generating your app with express, but there are some important lines. Line 5 is where we include the native <code>fs</code> module so we can dynamically read in our controllers. Then in lines 25 to 30 we read in all js files from the controllers directory. Line 13 is pretty important too as it tells express where we want to store our views.</p>

<p>Now whenever we add a js file to our controllers directory we can format it in such a way that it will contain a group of routes. Here is an example that I place in <code>controllers/users.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Video</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">controller</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * a home page route</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/signup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// any logic goes here</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;users/signup&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * About page route</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// any logic goes here</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;users/login&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I choose to include my models on a per controller basis (<code>lines 1 to 2</code>), so in my MVC structure they are required in each controller. As modules are cached the first time they are loaded there is no overhead in doing this. Moreover I like having the reference to the models I am using in the file I am using them in.</p>

<p>Line 3 exports all of our routes in the controller function. From here on in you can use the express way of defining routes. But notice that I set my views like this: <code>res.render('users/signup')</code> which results in the view being loaded from <code>views/users/signup.jade</code> in this app.</p>

<p>Finally, for reference, here is what the model in <code>models/user.js</code> may look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">,</span><span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span>
</span><span class='line'>      <span class="nx">userSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">username</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">password</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>      <span class="p">}),</span>
</span><span class='line'><span class="nx">User</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="nx">userSchema</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">User</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like doing things this way because the controller is mediating both the models and the views which for me is the spirit of MVC. There is also a huge organisational win too: if I want to work on users/signup I know I that my model is in <code>models/user.js</code>; my route is in <code>controllers/users.js</code> and my view is in <code>views/users/signup.jade</code>. And that is what makes MVC such a great pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB for Developers Certificate]]></title>
    <link href="http://timstermatic.github.io/blog/2013/08/16/mongodb-for-developers-certificate/"/>
    <updated>2013-08-16T08:55:00+02:00</updated>
    <id>http://timstermatic.github.io/blog/2013/08/16/mongodb-for-developers-certificate</id>
    <content type="html"><![CDATA[<p>Today I received my MongoDB for Developers certificate. Here it is in most of its glory:</p>

<p><img src="http://timstermatic.github.io/images/mongodb-for-developers-certificate.png" alt="MongoDB for Developers Certificate" /></p>

<p>I&rsquo;d recommend anyone interested in learning about MongoDB to give it a go. The course is 6 weeks long and you also get to learn a bit of Python along the journey. As it&rsquo;s offered by 10gen, the company who develop MongoDB, it&rsquo;s probably the best source of learning on the subject.</p>

<p>There are a few courses specialised by language which you can find on their <a href="https://education.10gen.com/courses/">list of mongodb courses</a>.</p>

<p>I&rsquo;m now on my first week of MongoDB for Node.js developers, and I hear there may be a C# one in the pipeline.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending emails with Node.js and Amazon SES]]></title>
    <link href="http://timstermatic.github.io/blog/2013/08/14/sending-emails-with-node-dot-js-and-amazon-ses/"/>
    <updated>2013-08-14T15:16:00+02:00</updated>
    <id>http://timstermatic.github.io/blog/2013/08/14/sending-emails-with-node-dot-js-and-amazon-ses</id>
    <content type="html"><![CDATA[<p>In a nutshell: SES is a reliable way to unload the burden of sending emails. Here&rsquo;s how to harness Amazon&rsquo;s Node.js SDK to send emails. The example below is a raw Node.js app, but should be easy enough to integrate with your framework of choice &ndash; e.g. Express / Geddy.</p>

<p>I&rsquo;ve posted all the code in <a href="https://github.com/timstermatic/node-amazon-ses-example">an example on github</a>.</p>

<h3>Some prerequisites</h3>

<ol>
<li>An <a href="http://aws.amazon.com">Amazon AWS account</a> with <a href="http://aws.amazon.com/ses/">SES</a> enabled.</li>
<li>Your Amazon Key and Secret.</li>
<li><a href="http://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">Verfiy an email address at SES</a>.</li>
</ol>


<p>First, install the Amazon SDK.</p>

<pre><code>npm install aws-sdk
</code></pre>

<p>Or you can add it as a dependency to your <code>package.json</code>:</p>

<pre><code>{
    "dependencies": {
        "aws-sdk": "latest"
    }
}
</code></pre>

<p>Then create a config file to hold your amazon credentions &ndash; e.g. config.json:</p>

<pre><code>{ "accessKeyId": "YOURAMAZONKEY", "secretAccessKey": "YOURAMAZONSECRET", "region": "us-west-2" }
</code></pre>

<p>This example is a single script, but it would work just fine integrated into an express route etc. There&rsquo;s an explanation below:</p>

<pre><code>// load aws sdk
var aws = require('aws-sdk');

// load aws config
aws.config.loadFromPath('config.json');

// load AWS SES
var ses = new aws.SES({apiVersion: '2010-12-01'});

// send to list
var to = ['email@example.com']

// this must relate to a verified SES account
var from = 'emailc@example.com'


// this sends the email
// @todo - add HTML version
ses.sendEmail( { 
   Source: from, 
   Destination: { ToAddresses: to },
   Message: {
       Subject:Source {
          Data: 'A Message To You Rudy'
       },
       Body: {
           Text: {
               Data: 'Stop your messing around',
           }
        }
   }
}
, function(err, data) {
    if(err) throw err
        console.log('Email sent:');
        console.log(data)console;
 });
</code></pre>

<p>The ses.sendEmail passes a json string with the necessary parameters required by Amazon SES. This example sends a text message, but if you look over <a href="http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SES_20101201.html#sendEmail-property">the docs for the sendEmail call</a> you will a HTML version can be easily passed (along with a host of other parameters).</p>

<p>The callback function accepts the defacto <code>err</code> argument for collecting any errors and above use the second parameter <code>data</code> to output the information the service sends back on a successful send.</p>

<h3>Where to go from here.</h3>

<p>The next logical step in this script would be to read in a text file for the body so you can send templated emails. Look to <a href="http://nodejs.org/api/fs.html">Node.js&#8217; <code>fs</code></a> to achieve something like that.</p>

<p>You could also wrap this functionality in a module so you can reuse it across your app with a more succint syntax..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async Unique validation with expressjs and mongoose]]></title>
    <link href="http://timstermatic.github.io/blog/2013/08/06/async-unique-validation-with-expressjs-and-mongoose/"/>
    <updated>2013-08-06T13:02:00+02:00</updated>
    <id>http://timstermatic.github.io/blog/2013/08/06/async-unique-validation-with-expressjs-and-mongoose</id>
    <content type="html"><![CDATA[<p>In a nutshell: here is how to add elegant validation with a useful error message for a field being unique. This is great for usernames, email addresses etc. that can only appear once in your collection.</p>

<p>Line 16 onwards  are the ones to note. It&rsquo;s a custom validation rule set on &ldquo;email&rdquo;. What&rsquo;s important is that it adds a callback to the validate function which I have arbitrarily named <code>respond</code>. Notice that I can now search for an existing user and in the callback for that search, if a user is found, I can return false to my validation by passing false through my <code>respond</code> callback.</p>

<div><script src='https://gist.github.com/6163577.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resumable polling with jQuery]]></title>
    <link href="http://timstermatic.github.io/blog/2013/07/02/resumable-polling-with-jquery/"/>
    <updated>2013-07-02T12:48:00+02:00</updated>
    <id>http://timstermatic.github.io/blog/2013/07/02/resumable-polling-with-jquery</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a very simplified version of a technique I&rsquo;ve used recently on our startup video platform, <em>zumoflow</em>. We needed a way of updating our mongodb engagement table periodically, only when a video was being played. For this we needed to set off a periodic poll when video play started and pause the poll when the video play was paused or stopped.</p>

<p>The following code shows the skeleton for two simple events. One to start and one to stop the poll:</p>

<pre><code>// initialize a timer variable
// we need to use this to reference stopping the timeout

var timer;

// this function starts the poll and binds it to a variable called timer
// There's a configurable 2000 ms timeout on calling the function

function doPoll() {
    $.post('http://localhost', data, function(data) {
            timer = setTimeout(doPoll, 2000);
    })
}
</code></pre>

<p>Then we can attach the event to start the poll to any element:</p>

<pre><code>$('.start').click( function() {
    doPoll();
    return false;
});
</code></pre>

<p>Finally we can attach the stop event which clears the timeout using the JavaScript <code>clearTimeout</code> function:</p>

<pre><code>$('.stop').click( function() {
    clearTimeout(timer);
    return false;
});
</code></pre>

<p>References:</p>

<ol>
<li><a href="http://api.jquery.com/jQuery.post/">jQuery $.post documentation</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout">window.setTimeout</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/window.clearTimeout">window.clearTimeout</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
